
################################## Week one (part2) ####################################

Cette deuxième partie ce focalise sur Git et son branching pour  
comprendre ce que Git implique ainsi que les notions de dépôts locaux ou distants.  


Familiarisation avec le Git branching
*************************************


Qu'est-ce que le Git branching : 

Le branching (gestion des branches) est une fonctionnalité essentielle de Git qui permet de travailler 
sur différentes versions d’un projet en parallèle. Une branche est une copie indépendante du projet sur
laquelle on peut expérimenter ou développer de nouvelles fonctionnalités sans affecter la version 
principale (nommé main ou master).

Lorsque l'on crée une branche, Git ne duplique pas tous les fichiers mais pointe simplement vers le dernier
commit de la branche actuelle. On peut ensuite faire des modifications et les enregistrer avec des commits, 
qui seront isolés dans cette branche tant qu’ils ne sont pas fusionnés avec la branche principale.

Pour travailler avec une branche, on commence par la créer avec [git branch le nom de la branche], puis on
bascule dessus avec [git checkout le nom de la branche] ou [git switch le nom de la branche].
Une fois que le travail est terminé et testé, on peut fusionner cette branche avec la branche principale
en exécutant [git checkout main] suivi de [git merge le nom de la branche].

L’utilisation des branches permet d'éviter d’introduire d'erreurs dans la version stable d’un projet. 
Elle permet aussi à plusieurs personnes de travailler en parallèle sur différentes fonctionnalités d'un projet 
sans se gêner mutuellement. Une fois la fusion effectuée et si la branche n’est plus nécessaire, 
on peut la supprimer avec [git branch -d le nom de la branche] pour garder le dépôt propre.


Voici un cheat sheet des commandes bases pour le Git branching :
 
					  #Ajout des fichier à modifier (indexation) | les fichier doivent être la ou on se trouve c'est ce que le (.) signifie
					- git add .

                                          #Création d'un commit un message
					- git commit -m "le message décrivant la modification"

                                          #Envoie des modifications vers GitHub                                                      
                                        - git push origin le_nom_de_la_branche (main/master)
  
                                          #Liste les branches existantes 
                                        - git branch

                                          #Création d'une nouvelle branche
					- git branch le_nom_de_la_branche 

                                          #Basculer sur une branche 
                                        - git switch le_nom_de_la_branche (ou git checkout le_nom_de_la_branche)

                                          #Fusionne une branche avec main/master
					- git checkout main / git merge le_nom_de_la_branche 

                                          #Supprime une branche
                                        - git branch –d le_nom_de_la_branche

                                          #Fusionne toutes les modifications présente sur le dépôt distant dans le répertoire de travail local 
					- git pull

                                          #Enumére tous les conflits actuels
                                        - git diff

					  #Liste les conflits (pour visualiser ces conflits) 
					- git diff --base le_nom_de_la_branche

					  #La commande suivante est utilisée pour afficher les conflits entre les branches à fusionner avant de les fusionner
					- git diff branch-source branche-cible

					  #Génère le log d'une branche
					- git log
					
					  #Réinitialise l'index et le répertoire de travail à l'état du dernier commit 
					- git reset --hard HEAD

					  #Peut supprimer des fichier de l'index et du répertoire 
					- git rm le_nom_du_fichier.txt

					  #(Très peu connu) Enregistre les changements qui ne doivent pas être commit immédiatement (commande temporaire) 
					- git stash

					  #Affiche les informations sur tout fichier git 
					- git show

					  #Permet à un utilisateur d’extraire tous les fichiers du dépôt distant qui ne sont pas actuellement dans le répertoire de travail local
					- git fetch origin

					  #Permet de chercher dans les arbres de contenu des expressions et / ou des mots 
					- git grep "hostlinger"

					  #Interface graphique du dépôt 
					- gitk

					  #Les fichiers qui n'ont pas de pointeurs entrants seront supprimés 
					- git prune
					
					  #Permet d'effectuer une vérification d’intégrité du système de fichiers git pour identifiés tous les fichiers corrompus
					- git fsck



https://www.hostinger.fr/tutoriels/commandes-git#Branche_git
https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Gestion-des-branches
https://www.jesuisundev.com/comprendre-git-en-7-minutes/

#############################################################################################################################
